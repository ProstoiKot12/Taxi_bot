import re

from aiogram.types import CallbackQuery, Message, InputMediaPhoto, FSInputFile
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove

from russian.keyboards.user_keyboards import transfer_about_ru_kb, pick_direction_ru_kb, choice_inside_antalya_ru_kb, \
                                             location_share_kb_ru, transfer_about_en_kb, pick_direction_en_kb,  \
                                             choice_inside_antalya_en_kb, location_share_kb_en, pick_direction_tr_kb, \
                                             choice_inside_antalya_tr_kb, location_share_kb_tr
from utils.sql_request import insert_user_language, insert_user_info, is_language
from config import CHAT_ID


class Form_ru(StatesGroup):
    Kemer_Goynuk_Beldibi_phone_ru = State()
    Kemer_Goynuk_Beldibi_location_ru = State()
    Kemer_Goynuk_Beldibi_done_ru = State()

    Belek_en_phone_ru = State()
    Belek_en_location_ru = State()
    Belek_en_done_ru = State()

    Side_en_phone_ru = State()
    Side_en_location_ru = State()
    Side_en_done_ru = State()

    Manavgat_en_phone_ru = State()
    Manavgat_en_location_ru = State()
    Manavgat_en_done_ru = State()

    Alanya_en_phone_ru = State()
    Alanya_en_location_ru = State()
    Alanya_en_done_ru = State()

    Mahmutlar_en_phone_ru = State()
    Mahmutlar_en_location_ru = State()
    Mahmutlar_en_done_ru = State()

    Tekirova_Chamyuva_en_phone_ru = State()
    Tekirova_Chamyuva_en_location_ru = State()
    Tekirova_Chamyuva_en_done_ru = State()

    inside_antalya_phone_ru = State()
    inside_antalya_location_ru = State()
    inside_antalya_done_ru = State()


name = ''
number_phone = 0
location = ''
phone_pattern = r"\+\d{11}"
pattern = r"\+\d{12}"

async def select_language_russian(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer('')
    user_state = await state.get_state()

    if user_state == 'started':

        await insert_user_language('—Ä—É—Å—Å–∫–∏–π', call.from_user.id)

        await insert_user_language('turkey', call.from_user.id)
        photo_1 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_1.jpg'))
        photo_2 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_2.jpg'))
        photo_3 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_3.jpg'))
        media = [photo_1, photo_2, photo_3]
        await bot.send_media_group(call.from_user.id, media=media)

        await call.message.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –≤ –ê–Ω—Ç–∞–ª–∏–∏!</b>ü•∞\n\n'
                                 '–ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏, –Ω–∞–¥–µ–∂–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ.\n'
                                 '–ó–∞–∫–∞–∂–∏—Ç–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –Ω–∞–º–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —É–¥–æ–±—Å—Ç–≤–æ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –≤–æ –≤—Ä–µ–º—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –≤ —ç—Ç–æ–º –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–º –≥–æ—Ä–æ–¥–µ.\n\n'
                                 '<b>–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è! </b>üöñ‚ú®\n\n'
                                 '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                                 '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=pick_direction_ru_kb)

        await state.set_state("close")
    else:
        language = await is_language(call.from_user.id)

        if language == '—Ä—É—Å—Å–∫–∏–π':
            await call.message.answer('–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫')
        elif language == 'english':
            await call.message.answer('You have already chosen the language')
        elif language == 'turkey':
            await call.message.answer('Zaten bir dil se√ßtiniz!')

async def select_language_turkey(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer('')
    user_state = await state.get_state()

    if user_state == 'started':

        await insert_user_language('turkey', call.from_user.id)
        photo_1 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_1.jpg'))
        photo_2 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_2.jpg'))
        photo_3 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_3.jpg'))
        media = [photo_1, photo_2, photo_3]
        await bot.send_media_group(call.from_user.id, media=media)
        await call.message.answer("<b>Antalya'daki transfer hizmetimize ho≈ü geldiniz!</b>ü•∞\n\n"
                                 'Size konforlu seyahat, g√ºvenilir s√ºr√ºc√ºler ve hƒ±zlƒ± hizmet sunmaya hazƒ±rƒ±z.\n'
                                 'Bizimle bir transfer rezervasyonu yapƒ±n ve bu g√ºzel ≈üehirde konaklamanƒ±zƒ±n rahatlƒ±ƒüƒ±nƒ±n ve g√ºvenliƒüinin tadƒ±nƒ± √ßƒ±karƒ±n.\n\n'
                                 '<b>ƒ∞yi yolculuklar! </b>üöñ‚ú®\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=pick_direction_tr_kb)

        await state.set_state("close")
    else:
        language = await is_language(call.from_user.id)

        if language == '—Ä—É—Å—Å–∫–∏–π':
            await call.message.answer('–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫!')
        elif language == 'english':
            await call.message.answer('You have already chosen the language!')
        elif language == 'turkey':
            await call.message.answer('Zaten bir dil se√ßtiniz!')

async def select_language_english(call: CallbackQuery, state: FSMContext, bot: Bot):
    await call.answer('')
    user_state = await state.get_state()

    if user_state == 'started':
        await insert_user_language('english', call.from_user.id)

        await insert_user_language('turkey', call.from_user.id)
        photo_1 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_1.jpg'))
        photo_2 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_2.jpg'))
        photo_3 = InputMediaPhoto(type='photo',
                                  media=FSInputFile(r'photo_3.jpg'))
        media = [photo_1, photo_2, photo_3]
        await bot.send_media_group(call.from_user.id, media=media)

        await call.message.answer('<b>Welcome to our transfer service in Antalya!</b>ü•∞\n\n'
                                 'We are ready to offer you comfortable trips, reliable drivers and prompt service.\n'
                                 'Book a transfer with us and enjoy convenience and safety during your stay in this beautiful city.\n\n'
                                 '<b>Have a great trip! </b>üöñ‚ú®\n\n'
                                 'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                                 'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=pick_direction_en_kb)
        await state.set_state("close")
    else:
        language = await is_language(call.from_user.id)

        if language == '—Ä—É—Å—Å–∫–∏–π':
            await call.message.answer('–¢—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫')
        elif language == 'english':
            await call.message.answer('You have already chosen the language')
        elif language == 'turkey':
            await call.message.answer('Zaten bir dil se√ßtiniz!')

async def transfer_about_ru(call: CallbackQuery):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('<b>–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ê–Ω—Ç–∞–ª–∏–∏.</b>üîé\n'
                                  '–°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º —É—Å–ª–æ–≤–∏—è–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>12.5 –ª–∏—Ä</b> –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä.\n\n'
                                  '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                                  '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=pick_direction_ru_kb)
    elif language == 'english':
        await call.message.answer(
            '<b>We are happy to provide information on transfer rates within Antalya.</b>üîé\n'
            'According to our conditions, the cost is <b>12.5 liras</b> per kilometer traveled.\n\n'
            'We can arrange transfers from anywhere in Antalya and its suburbs\n'
            'If you have any questions about transfers, please contact our manager @gotransfer_manager',
            reply_markup=pick_direction_en_kb)
    elif language == 'turkey':
        await call.message.answer(
            '<b>We are happy to provide information on transfer rates within Antalya.</b>üîé\n'
            'According to our conditions, the cost is <b>12.5 liras</b> per kilometer traveled.\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin',
            reply_markup=pick_direction_tr_kb)

async def pick_direction_ru(call: CallbackQuery):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã\n\n'
                                  '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                                  '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=choice_inside_antalya_ru_kb)
    elif language == 'english':
        await call.message.answer('Here are all available routes\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=choice_inside_antalya_en_kb)
    elif language == 'turkey':
        await call.message.answer('ƒ∞≈üte mevcut t√ºm rotalar\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=choice_inside_antalya_tr_kb)

async def Kemer_Goynuk_Beldibi_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Kemer_Goynuk_Beldibi_phone_ru)

async def Kemer_Goynuk_Beldibi_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Kemer_Goynuk_Beldibi_location_ru)

async def Kemer_Goynuk_Beldibi_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Kemer_Goynuk_Beldibi_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Kemer_Goynuk_Beldibi_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Kemer_Goynuk_Beldibi_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Kemer_Goynuk_Beldibi_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–ö–µ–º–µ—Ä-–ì–æ–π–Ω—é–∫-–ë–µ–ª—å–¥–∏–±–∏</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Belek_en(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Belek_en_phone_ru)

async def Belek_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Belek_en_location_ru)

async def Belek_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Belek_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Belek_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Belek_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Belek_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–ë–µ–ª–µ–∫</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Side_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Side_en_phone_ru)

async def Side_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Side_en_location_ru)

async def Side_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Side_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Side_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Side_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Side_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–°–∏–¥–µ</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Manavgat_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Manavgat_en_phone_ru)

async def Manavgat_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Manavgat_en_location_ru)

async def Manavgat_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Manavgat_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Manavgat_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Manavgat_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Manavgat_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–ú–∞–Ω–∞–≥–≤–∞—Ç</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Alanya_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Alanya_en_phone_ru)

async def Alanya_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Alanya_en_location_ru)

async def Alanya_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Alanya_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Alanya_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Alanya_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Alanya_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–ê–ª–∞–Ω—å—è</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Mahmutlar_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Mahmutlar_en_phone_ru)

async def Mahmutlar_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Mahmutlar_en_location_ru)

async def Mahmutlar_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Mahmutlar_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Mahmutlar_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Mahmutlar_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Mahmutlar_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä:\n'
                                     f'<b>–ú–∞—Ö–º—É—Ç–ª–∞—Ä</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def inside_antalya(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('<b>–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ê–Ω—Ç–∞–ª–∏–∏.</b>üîé\n'
                                  '–°–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—à–∏–º —É—Å–ª–æ–≤–∏—è–º, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>12.5 –ª–∏—Ä</b> –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π –∫–∏–ª–æ–º–µ—Ç—Ä.\n\n'
                                  '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                                  '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager')
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':
        await call.message.answer('<b>We are happy to provide information on transfer rates within Antalya.</b>üîé\n'
                                  'According to our conditions, the cost is <b>12.5 liras</b> per kilometer traveled.\n\n'
                                  'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                                  'If you have any questions about transfers, please contact our manager @gotransfer_manager')
        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('<b>Antalya i√ßi transfer √ºcretleri hakkƒ±nda bilgi vermekten mutluluk duyarƒ±z.</b>üîé\n'
                                  'H√ºk√ºm ve ko≈üullarƒ±mƒ±za g√∂re, kat edilen kilometre ba≈üƒ±na <b>12,5 lira</b> √ºcret alƒ±nmaktadƒ±r.\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin')
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.inside_antalya_phone_ru)

async def inside_antalya_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Mahmutlar_en_location_ru)

async def inside_antalya_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.inside_antalya_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.inside_antalya_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.inside_antalya_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def inside_antalya_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞\n'
                                     f'<b>–í–Ω—É—Ç—Ä–∏ –ê–Ω—Ç–∞–ª–∏–∏</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")

async def Tekirova_Chamyuva_ru(call: CallbackQuery, state: FSMContext):
    await call.answer('')
    language = await is_language(call.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    elif language == 'english':

        await call.message.answer('Enter your name')
    elif language == 'turkey':
        await call.message.answer('Adƒ±nƒ±zƒ± girin')

    await state.set_state(Form_ru.Tekirova_Chamyuva_en_phone_ru)

async def Tekirova_Chamyuva_en_phone_ru(message: Message, state: FSMContext):
    global name
    name = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
    elif language == 'english':
        await message.answer('Enter your phone number')
    elif language == 'turkey':
        await message.answer('Telefon numaranƒ±zƒ± girin')

    await state.set_state(Form_ru.Tekirova_Chamyuva_en_location_ru)

async def Tekirova_Chamyuva_en_location_ru(message: Message, state: FSMContext):
    global number_phone
    number_phone = message.text.strip()
    language = await is_language(message.from_user.id)

    if language == '—Ä—É—Å—Å–∫–∏–π':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', reply_markup=location_share_kb_ru)
            await state.set_state(Form_ru.Tekirova_Chamyuva_en_done_ru)
        else:
            await message.answer('–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É +71234567890 –∏–ª–∏ +900000000000')
    elif language == 'english':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Share your geolocation', reply_markup=location_share_kb_en)
            await state.set_state(Form_ru.Tekirova_Chamyuva_en_done_ru)
        else:
            await message.answer('The phone number must be in the format +71234567890 or +900000000000')
    elif language == 'turkey':
        if re.match(phone_pattern, number_phone) or re.fullmatch(pattern, number_phone):
            await message.answer('Coƒürafi konumunuzu payla≈üƒ±n', reply_markup=location_share_kb_tr)
            await state.set_state(Form_ru.Tekirova_Chamyuva_en_done_ru)
        else:
            await message.answer('Telefon numarasƒ± +71234567890, +900000000000 bi√ßiminde olmalƒ±dƒ±r')

async def Tekirova_Chamyuva_en_done_ru(message: Message, state: FSMContext, bot: Bot):
    lat = message.location.latitude
    lon = message.location.longitude
    reply = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(f'<code>{lat}</code>', f'<code>{lon}</code>')
    reply_for_sql = "–®–∏—Ä–∏–Ω–∞: {}\n–î–æ–ª–≥–æ—Ç–∞: {}".format(lat, lon)
    language = await is_language(message.from_user.id)

    await insert_user_info(message.from_user.id, message.from_user.username, name, number_phone, reply_for_sql)

    await bot.send_message(CHAT_ID, f'–ë—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä\n'
                                     f'<b>–¢–µ–∫–∏—Ä–æ–≤–∞-–ß–∞–º—å—é–≤–∞</b>\n'
                                     f'–ò–º—è: <b>{name}</b>\n'
                                     f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <code>{number_phone}</code>\n'
                                     f'–¢–µ–ª–µ–≥—Ä–∞–º–º: @{message.from_user.username}\n'
                                     f'{reply}')
    if language == '—Ä—É—Å—Å–∫–∏–π':
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–∞\n'
                             '–ß—Ç–æ–±—ã –µ—â–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /transfers\n\n'
                             '–ú—ã –º–æ–∂–µ–º –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä —Å –ª—é–±–æ–π —Ç–æ—á–∫–∏ –ê–Ω—Ç–∞–ª–∏–∏ –∏ –µ–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–∞—Ö\n'
                             '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ –ø–æ–≤–æ–¥—É —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'english':
        await message.answer('Great, the application has been left\n'
                             'To select more destinations, enter the /transfers command\n\n'
                             'We can arrange transfers from anywhere in Antalya and its suburbs\n'
                             'If you have any questions about transfers, please contact our manager @gotransfer_manager', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
    elif language == 'turkey':
        await message.answer('Harika, uygulama bƒ±rakƒ±ldƒ±\n'
                             'Daha fazla hedef se√ßmek i√ßin /transfers komutunu girin\n\n'
                                 'Antalya ve banliy√∂lerinin her yerinden transfer ayarlayabiliriz\n'
                                 'Transferler hakkƒ±nda herhangi bir sorunuz varsa @gotransfer_manager ile ileti≈üime ge√ßin', reply_markup=ReplyKeyboardRemove())
        await state.set_state("close")
